<?php

/*
 * Auto generated by polyfony-inc/console 
 * on __datetime__
 *
 */

namespace Models;
use Polyfony as pf;

class __Table__ extends Polyfony\Record {

	// a define what columns should not be altered by a ->setSafely($columns_and_values) 
	const SET_SAFELY_COLUMNS = [
		'id',
		'creation_date',
		'creation_by',
		'modification_date',
		'modification_by'
	];

	// list of hard validation, to prevent some data types from entering the database
	const VALIDATORS = [
		// those only apply to instance methods
	];

	 /////////////////////////////////////
	 //  ___ _____ _ _____ ___ ___       
	 // / __|_   _/_\_   _|_ _/ __|      
	 // \__ \ | |/ _ \| |  | | (__       
	 // |___/ |_/_/_\_\_| |___\___| _    
	 //  _ __  ___| |_| |_  ___  __| |___
	 // | '  \/ -_)  _| ' \/ _ \/ _` (_-<
	 // |_|_|_\___|\__|_||_\___/\__,_/__/
                                  

	// return a list with id as a key, mostly usefull for select list
	public static function idAsKey(array $where = [], bool $allow_cache = false) :array {

	}

	// search in all records
	public static function search(array $matching=[]) :array {

		return self::filter(Polyfony\Database::query()
			->select()
			->from('__Table__')
			->whereContains($matching)
			->execute());

	}

	// return all records from __Table__ or a subset
	public static function all(array $where = []) :array {

		// the base query
		$query = Polyfony\Database::query()
			->select()
			->from('__Table__');

		// if basic where conditions are provided
		if($where) {
			// apply them
			$query->where($where);
		}

		// execute and filter the query
		return self::filter($query->execute());

	}

	// filter the result depending on whatever your want
	public static function filter(array $__Table__) :array {

		// list of allowed records, that passed thru the filter
		$allowed_records = [];

		// for each of the record provided
		foreach($__Table__ as $__Singular__) {

			// some right are applied here
			if(true) {
		
				// allow that record
				$allowed_records[$__Singular__->get('id')] = $__Singular__; 
		
			}

		}

		// return the list of allowed records
		return $allowed_records;

	}

	 /////////////////////////////////////
	 //   ___  ___    _ ___ ___ _____    
	 //  / _ \| _ )_ | | __/ __|_   _|   
	 // | (_) | _ \ || | _| (__  | |     
	 //  \___/|___/\__/|___\___| |_|_    
	 //  _ __  ___| |_| |_  ___  __| |___
	 // | '  \/ -_)  _| ' \/ _ \/ _` (_-<
	 // |_|_|_\___|\__|_||_\___/\__,_/__/
                                  

	// set columns, but apply some protection
	public function setSafely(array $columns_and_values) :self {

		// for each column to set
		foreach($columns_and_values as $column => $value) {
			// make sure that column is not protected
			if(!in_array(strtolower($column), self::SAFE_SET_COLUMNS)) {
				// allow to set the value on that column
				$this->set([$column=>$value]);
			}
		}

	}

	// get that column, is a safe way, and with a length limitation
	public function getColumnName(int $length = 32) :string {
		// escape html
		return Polyfony\htmlSafe(
			// restrict the maximum length
			Polyfony\Format::truncate(
				$this->get('ColumnName'),
				$length
			)
		);

	}

	// get the url for that object, depending on the user level
	public function getUrl($id_level = null) :string {

		return '';

	}

	// save the record
	public function save() :bool {

		// some custom manipulation before saving
		// ...

		//$this->set([
		//	'modification_date'=>time(),
		//	'modification_by'=>Polyfony\Security::get('id')
		//]);

		// call the parent saver
		return parent::save();

	}

}

?>

